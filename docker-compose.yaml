services:
  # Product service provides product data
  product-service:
    build:
      context: products
      dockerfile: src/main/docker/Dockerfile.jvm
    networks:
      - traefik
      - products
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      KEYCLOAK_EXE_SECRET: ${KEYCLOAK_EXE_SECRET}
      HOSTNAME: ${HOSTNAME}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.products.rule=Host("${HOSTNAME}") && PathPrefix("/api/product-service")
      - traefik.http.services.products.loadbalancer.server.port=8080
      - traefik.http.middlewares.products-stripprefix.stripprefix.prefixes=/api/product-service
      - traefik.http.routers.products.middlewares=products-stripprefix
  # Basket service manages baskets
  basket-service:
    build:
      context: basket
      dockerfile: src/main/docker/Dockerfile.jvm
    networks:
      - traefik
      - basket
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.basket.rule=Host("${HOSTNAME}") && PathPrefix("/api/basket-service")
      - traefik.http.services.basket.loadbalancer.server.port=8080
      - traefik.http.middlewares.basket-stripprefix.stripprefix.prefixes=/api/basket-service
      - traefik.http.routers.basket.middlewares=basket-stripprefix
  # Web frontend
  online-shop:
    build:
      context: online-shop
      dockerfile: Dockerfile
      args:
        POSITIONSTACK_API_KEY: ${POSITIONSTACK_API_KEY}
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.online-shop.rule=Host("${HOSTNAME}") && PathPrefix("/")
      - traefik.http.services.online-shop.loadbalancer.server.port=3000
  # database for product service
  productdb:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: products
      PGDATA: /data/postgres
    volumes:
      - productdb:/data/postgres
    networks:
      - products
    restart: unless-stopped
  # database for basket service
  basketdb:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: basket
      PGDATA: /data/postgres
    volumes:
      - basketdb:/data/postgres
    networks:
      - basket
    restart: unless-stopped
  # database management tool
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      SCRIPT_NAME: /management/pgadmin
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - traefik
      - products
      - basket
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.pgadmin.rule=Host("${HOSTNAME}") && PathPrefix("/management/pgadmin")
  # api view tool 
  swagger-ui:
    image: swaggerapi/swagger-ui
    environment:
      URLS: "[\n  { url: \"/api/product-service/q/openapi\", name: \"Products\" }, \n  { url: \"/api/basket-service/q/openapi\", name: \"Basket\" },\n]\n"
      BASE_URL: /api/swagger-ui
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.swagger-ui.rule=Host("${HOSTNAME}") && PathPrefix("/api/swagger-ui")
      - traefik.http.services.swagger-ui.loadbalancer.server.port=8080
  # rabbitmq for messaging queues
  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.rabbitmq.rule=Host("${HOSTNAME}") && PathPrefix("/management/rabbitmq/")
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
      - traefik.http.middlewares.rabbitmq-stripprefix.stripprefix.prefixes=/management/rabbitmq/
      - traefik.http.routers.rabbitmq.middlewares=rabbitmq-stripprefix
    networks:
      - traefik
  cache:
    image: redis
    command: redis-server
  # Keycloak server SSO system for bikelin provides auth capabilities
  keycloak:
    image: quay.io/keycloak/keycloak
    volumes:
    - ./keywind/theme/keywind:/opt/keycloak/themes/keywind
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL_HOST: keycloakdb
      KC_DB_URL_DATABASE: keycloak
      KC_HTTP_RELATIVE_PATH: /management/keycloak
      KC_HOSTNAME: ${HOSTNAME}
      KC_STORAGE: jpa
      KC_PROXY: reencrypt
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.keycloak.rule=Host("${HOSTNAME}") && PathPrefix("/management/keycloak")
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    command:
      - start
    networks:
      - keycloak
      - traefik
  # database for keycloak
  keycloakdb:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: keycloak
      PGDATA: /data/postgres
    volumes:
      - keycloakdb:/data/postgres
    networks:
      - keycloak
    restart: unless-stopped
networks:
  basket:
  products:
  keycloak:
  traefik:
    external: true
    name: traefik
volumes:
  productdb:
  basketdb:
  keycloakdb:
  userdb:
  pgadmin:
